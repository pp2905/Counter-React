{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","this","getBagdeClasses","formatCount","onClick","props","onIncrement","counter","onDecrese","disabled","value","onDelete","classes","count","Component","Counters","onReset","counters","map","key","id","App","state","handleReset","c","setState","handleDelete","filter","handleIncrement","index","indexOf","handleDecrese","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2bb76a0c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log(\"navbar rendered\");\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n      <a href=\"#\" className=\"navbar-brand\">\r\n        Navbar\r\n        <span className=\"badge badge-pill badge-secondary m-2\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps\", prevProps);\r\n    console.log(\"prevState\", prevState);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"Counter unmount\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"counter rendered\");\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-1\">\r\n          <span className={this.getBagdeClasses()}>{this.formatCount()}</span>\r\n        </div>\r\n        <div className=\"col\">\r\n          <button\r\n            onClick={() => this.props.onIncrement(this.props.counter)}\r\n            className=\"btn btn-secondary btn-sm\"\r\n          >\r\n            +\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.onDecrese(this.props.counter)}\r\n            className=\"btn btn-secondary btn-sm m-2\"\r\n            disabled={this.props.counter.value === 0 ? true : \"\"}\r\n          >\r\n            -\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.onDelete(this.props.counter)}\r\n            className=\"btn btn-danger btn-sm\"\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBagdeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const { onReset, counters, onDelete, onIncrement, onDecrese } = this.props;\r\n\r\n    console.log(\"counters rendered\");\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrese={onDecrese}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 5 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n  constructor() {\n    super();\n    console.log(\"app - constructor\");\n  }\n\n  componentDidMount() {\n    console.log(\"app Mounted\");\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = counter => {\n    const counters = this.state.counters.filter(c => c.id !== counter.id);\n    this.setState({ counters });\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDecrese = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counter[index] = { ...counters };\n    counters[index].value--;\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"app rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onDecrese={this.handleDecrese}\n            counters={this.state.counters}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}